// https://learn.javascript.ru/operators

// БАЗОВЫЕ ОПЕРАТОРЫ
  // Термины "унарный", "бинарный", "операнд"
    // Операнд – то, к чему применяется оператор.
    // Унарным оператор - применяется к одному операнду
    // Бинарным оператор - применяется к двум операндам.

  // Математикие:
    // Сложение +,
    // Вычитание -,
    // Умножение *,
    // Деление /,
    // Взятие остатка от деления %,
    // Возведение в степень **.  

    // Сложение строк при помощи бинарного +
    // Приведение к числу, унарный +

    // Приоритет операторов
      // Каждый оператор имеет соответствующий номер приоритета.
      // Тот, у кого это число больше, – выполнится раньше.
      // Если приоритет одинаковый, то порядок выполнения – слева направо.
      // (приоритет унарных операторов выше, чем соответствующих бинарных)

  // Присваивание ( = ):
    // У "=" самый низкий приоритет, поэтому выполняется последним

  // Составное присваивание ( +=, -=, *=, /= ):
    // Вызов с присваиванием имеет в точности такой же приоритет, как обычное присваивание,
    // то есть выполнится после большинства других операций

  // Инкремент и декремент ( ++, -- ):  
    // !!! Инкремент/декремент можно применить только к переменной.
    // Попытка использовать его на значении, типа 5++, приведёт к ошибке.

    // counter++ — «постфиксная форма»
    // ++counter - «префиксная форма»
    // !!! Разница видна, если используется возвращаемое значение
                        // let a = 0;
                        // let b = ++a;
                        // console.log({ b });
                        
                        // let c = 1;
                        // ++c;
                        // console.log({ c });
    // могут также использоваться внутри выражений. Их приоритет выше, чем у
    // большинства других арифметических операций      
                        // let counter = 1;
                        // console.log( 2 * ++counter ); // 4  
                        
                        // let counter = 1;
                        // console.log( 2 * counter++ ); // 2 нюанс - оператор возвращает старое

  // Оператор «запятая»      
      // let a = (1 + 2, 3 + 4);
      // console.log( a ); // 7 (результат вычисления 3 + 4) 
      // a = 1 + 2, 3 + 4 => а = 3 т.к приоритет "," ниже "="
      // полезное применение:
      // for (a = 2, b = 3, c = a + b; c <=15; a++) { ... }    
      
  // Сравнение ( >, <, >=, <= ): https://learn.javascript.ru/comparison
    // retutn true or false
    // Сравнение строк ( Используется кодировка Unicode ):
      //( 'Я' > 'А' ); // true
      //( 'Коты' > 'Кода' ); // true

    // !!! При сравнении значений разных типов JavaScript приводит каждое из них к числу.
      // ( '2' > 1 ); // true, строка '2' становится числом 2
      // ( '01' == 1 ); // true, строка '01' становится числом 1  

      // !!! Сравнение с null и undefined:
        // ( null === undefined ); // false
        // ( null == undefined ); // true Эти значения равны друг другу и не равны никаким
        //   другим значениям. Это специальное правило языка.
        // при (< > <= >=) Значения null/undefined преобразуются к числам: null становится 0, а undefined – NaN.
        // ( null > 0 );  // (1) false 0 > 0
        // ( null == 0 ); // (2) false (читай выше - не равны никаким другим значениям)
        // ( null >= 0 ); // (3) true 

  // Логические ( !, ||, && ): https://learn.javascript.ru/logical-operators
    // !!! Важно научиться понимать  

  // Оператор объединения ( ?? ): https://learn.javascript.ru/nullish-coalescing-operator
    // возвращает первый аргумент, если он не null/undefined,  

  // Равенство ( ==, ===, !=, !== ):  
    // !!! Важно знать разницу == и ===
    // "==" - приобразовывает к числам
      // ( true == 1 ); // true
      // ( false == 0 ); // true
      //( '' == false ); // true т.к. пустая строка приобразовывается в 0  (+"")
      //( 0 == false ); // true т.к. false приобразовывается в 0
    // "===" - проверяет равенство без приведения типов  

// УСЛОВИЯ https://learn.javascript.ru/ifelse
  // if (...) { .... }

  // if (...) {
  //   ...
  // } else { ... }

  // if (...) {
  //   ...
  // } else if (...) {

  // } else { ... }

  // Инструкция if (…) вычисляет выражение в скобках и преобразует результат к логическому типу.
  // 0, пустая строка "", null, undefined и NaN становятся false - «ложныt» («falsy») значения.
  // Остальные значения становятся true - «правдивыми» («truthy»).

  // Условный оператор "?" - единственный "тернарный" оператор (три операнда)
    // let result = a > 1 ? "it's good" : "It's bad";

// ЦИКЛЫ https://learn.javascript.ru/while-for
  // Цикл «while»
      // while (condition) {
      //   // код
      //   // также называемый "телом цикла"
      // }
  // Цикл «do…while»    
    // Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось
    // хотя бы один раз, даже если условие окажется ложным.
      // let i = 0;
      // do {
      //   alert( i );
      //   i++;
      // } while (i < 3);
  // Цикл «for»
      // for (начало; условие; шаг) {
      //   // ... тело цикла ...
      // }    

  // Прерывание цикла: "break"
              // let sum = 0;

              // while (true) {
              //   let value = +prompt("Введите число", '');
              //   if (!value) break; // (*)
              //   sum += value;
              // }
              // alert( 'Сумма: ' + sum );

  // "continue" пропускает итерацию и продолжает цикл
              // for (let i = 0; i < 10; i++) {

              //   // если true, пропустить оставшуюся часть тела цикла
              //   if (i % 2 == 0) continue;
              
              //   alert(i); // 1, затем 3, 5, 7, 9
              // }    


//КОНСТРУКЦИЯ SWITCH  https://learn.javascript.ru/switch

              // let a = 2 + 2;

              // switch (a) {
              //   case 3:
              //     alert( 'Маловато' );
              //     break;
              //   case 4:
              //     alert( 'В точку!' );
              //     break;
              //   case 5:
              //     alert( 'Перебор' );
              //     break;
              //   default:
              //     alert( "Нет таких значений" );
              // }